/*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

   üõ†Ô∏è ùòøùòºùôëùôÑùòø ùôèùôÄùòæùôÉ ùôÑùôâùòæ - ùôäùôÅùôÅùôÑùòæùôÑùòºùôá ùòæùôäùòøùôÄ üõ†Ô∏è
   
   üìå NOTE:
   If you use or copy any part of this code,
   you MUST give proper credit!

   üìû Contact: +241 05730123
   üåê GitHub: https://github.com/DavidTechInc

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*/

const axios = require('axios');
const { cmd } = require('../command');
const config = require('../config'); // Ensure your API key is in config

// Command to fetch movie details
cmd({
    pattern: "movieinfo",
    desc: "Fetch detailed information about a movie.",
    category: "utility",
    react: "üéûÔ∏è",
    filename: __filename
}, async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const movieName = args.join(' ');
        if (!movieName) {
            return reply("üìΩÔ∏è Please provide the name of the movie.");
        }

        const apiUrl = `http://www.omdbapi.com/?t=${encodeURIComponent(movieName)}&apikey=${config.OMDB_API_KEY}`;
        const response = await axios.get(apiUrl);
        const data = response.data;

        if (data.Response === "False") {
            return reply("! Movie not found.");
        }

const movieInfo = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë      üé¨  MOVIE INFO      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéûÔ∏è  ùôèùôûùô©ùô°ùôö      : ${data.Title}
üìÖ  ùôîùôöùôñùôß       : ${data.Year}
üîû  ùôçùôñùô©ùôöùôô      : ${data.Rated}
üìÜ  ùôçùôöùô°ùôöùôñùô®ùôöùôô  : ${data.Released}
‚è±Ô∏è  ùôçùô™ùô£ùô©ùôûùô¢ùôö    : ${data.Runtime}
üé≠  ùôÇùôöùô£ùôßùôö     : ${data.Genre}
üé¨  ùòøùôûùôßùôöùôòùô©ùô§ùôß  : ${data.Director}
‚úçÔ∏è  ùôíùôßùôûùô©ùôöùôß    : ${data.Writer}
üé≠  ùòºùôòùô©ùô§ùôßùô®    : ${data.Actors}
üó£Ô∏è  ùôáùôñùô£ùôúùô™ùôñùôúùôö : ${data.Language}
üåç  ùòæùô§ùô™ùô£ùô©ùôßùôÆ  : ${data.Country}
üèÜ  ùòºùô¨ùôñùôßùôôùô®   : ${data.Awards}
‚≠ê  ùôÑùôàùòøùòΩ ùôçùôñùô©ùôûùô£ùôú: ${data.imdbRating}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
> *POWERED BY ùô≥Ã∑ùöäÃ∑ùöõÃ∑ùöîÃ∑-ùô≥Ã∑ùô¥Ã∑ùöüÃ∑ü©∏*
`;


        const imageUrl = data.Poster && data.Poster !== 'N/A' ? data.Poster : config.ALIVE_IMG;

        await conn.sendMessage(from, {
            image: { url: imageUrl },
            caption: `${movieInfo}\n> By SUKUNA-MD`
        }, { quoted: mek });
    } catch (e) {
        console.error(e);
        reply(`‚ùå Error: ${e.message}`);
    }
});
